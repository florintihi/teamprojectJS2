{"mappings":"AAAA,MAGMA,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cAAe,4CAIZC,eAAeC,IACpB,IACE,MAAMC,QAAuBC,MAXf,yFAWgCR,GACxCS,QAAkBF,EAAeG,OAEjCC,EAAY,GAClBF,EAAUG,OAAOC,SAAQC,IACvBH,EAAUG,EAAMC,IAAMD,EAAME,IAAI,IAGlC,MAAMC,QAAuBT,MApBhB,4FAoBgCR,GACvCkB,QAAaD,EAAeP,OAGlC,OAFAQ,EAAKC,QAAQC,MAAK,CAACC,EAAGC,IAAMA,EAAEC,aAAeF,EAAEE,eAExC,C,KAAEL,E,UAAMP,E,CACf,MAAOa,GAEP,MADAC,QAAQD,MAAM,uBAAwBA,GAChCA,C,GC1BHnB,iBACL,IACE,MAAMa,KAAEA,EAAIP,UAAEA,SAAoBL,IAE5BoB,EAAKC,SAASC,cAAc,kBAElCV,EAAKC,QAAQN,SAAQgB,IACnB,MAAMC,EAAYH,SAASI,cAAc,MACzCD,EAAUE,UAAUC,IAAI,YAExB,MAAMC,EAAaP,SAASI,cAAc,OAC1CG,EAAWF,UAAUC,IAAI,YACzBC,EAAWC,IAAM,oBACjBD,EAAWE,IAAM,kCAAkCP,EAAKQ,cACxDP,EAAUQ,YAAYJ,GAEtB,MAAMK,EAAoBZ,SAASI,cAAc,OACjDQ,EAAkBP,UAAUC,IAAI,uBAEhC,MAAMO,EAAWb,SAASI,cAAc,MACxCS,EAASR,UAAUC,IAAI,aACvBO,EAASC,YAAcZ,EAAKa,MAC5BH,EAAkBD,YAAYE,GAE9B,MAAMG,EAAahB,SAASI,cAAc,KAC1CY,EAAWX,UAAUC,IAAI,eAEzB,MAAMW,EAAcf,EAAKgB,UAAUC,KAAIC,GAAWpC,EAAUoC,KAC5D,IAAIC,EACFJ,EAAYK,OAAS,EAAI,GAAGL,EAAYM,MAAM,EAAG,GAAGC,KAAK,eAAgBP,EAAYO,KAAK,MAC5F,MAAMC,EAAc,IAAIC,KAAKxB,EAAKyB,cAAcC,cAC1CC,EAAS3B,EAAKN,aAAakC,QAAQ,GAEzCd,EAAWe,UAAY,GAAGV,OAAqBI,+BAAyCI,QAExFjB,EAAkBD,YAAYK,GAC9Bb,EAAUQ,YAAYC,GACtBb,EAAGiC,OAAO7B,EAAU,G,CAEtB,MAAON,GACPC,QAAQD,MAAM,SAAUA,E,EAI5BoC,GC5COvD,iBACH,IACI,MAAMa,KAAEA,SAAeZ,IACjBuD,EAAclC,SAASC,cAAc,UAE3CV,EAAKC,QAAQN,SAAQgB,IACjB,MAAMiC,EAAcnC,SAASI,cAAc,KAC3C+B,EAAYrB,YAAcZ,EAAKa,MAC/BmB,EAAYvB,YAAYwB,EAAY,IAGxCrC,QAAQsC,IAAI,C,KAAC7C,G,CACf,MAAOM,GACLC,QAAQD,MAAM,6BAA8BA,E,EAIpDwC","sources":["src/js/fetch-data.js","src/js/main.js","src/js/modal.js"],"sourcesContent":["const apiKey = '48ef3a20ec8d887e9b9ced5296a0c50a';\nconst urlFetch = `https://api.themoviedb.org/3/trending/movie/week?api_key=${apiKey}`;\nconst genresUrl = `https://api.themoviedb.org/3/genre/movie/list?api_key=${apiKey}`;\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization: 'Bearer 48ef3a20ec8d887e9b9ced5296a0c50a',\n  },\n};\n\nexport async function fetchMoviesData() {\n  try {\n    const genresResponse = await fetch(genresUrl, options);\n    const genreData = await genresResponse.json();\n\n    const genresMap = {};\n    genreData.genres.forEach(genre => {\n      genresMap[genre.id] = genre.name;\n    });\n\n    const moviesResponse = await fetch(urlFetch, options);\n    const data = await moviesResponse.json();\n    data.results.sort((a, b) => b.vote_average - a.vote_average);\n\n    return { data, genresMap };\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\n","import { fetchMoviesData } from './fetch-data.js';\n\nexport async function fetchFilmData() {\n  try {\n    const { data, genresMap } = await fetchMoviesData();\n\n    const ul = document.querySelector('.cards-wrapper');\n\n    data.results.forEach(film => {\n      const liElement = document.createElement('li');\n      liElement.classList.add('film-box');\n\n      const imgElement = document.createElement('img');\n      imgElement.classList.add('film-img');\n      imgElement.alt = 'Movie cover photo';\n      imgElement.src = `https://image.tmdb.org/t/p/w500${film.poster_path}`;\n      liElement.appendChild(imgElement);\n\n      const filmInfoContainer = document.createElement('div');\n      filmInfoContainer.classList.add('film-info-container');\n\n      const filmName = document.createElement('h2');\n      filmName.classList.add('film-name');\n      filmName.textContent = film.title;\n      filmInfoContainer.appendChild(filmName);\n\n      const filmRating = document.createElement('p');\n      filmRating.classList.add('film-rating');\n\n      const genresNames = film.genre_ids.map(genreId => genresMap[genreId]);\n      let formattedGenres =\n        genresNames.length > 2 ? `${genresNames.slice(0, 2).join(', ')}, Other`: genresNames.join(', ');\n      const releaseYear = new Date(film.release_date).getFullYear();\n      const rating = film.vote_average.toFixed(1);\n\n      filmRating.innerHTML = `${formattedGenres} | ${releaseYear} <p class=\"rating-display\">${rating}</p>`;\n\n      filmInfoContainer.appendChild(filmRating);\n      liElement.appendChild(filmInfoContainer);\n      ul.append(liElement);\n    });\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\nfetchFilmData();\n","import { fetchMoviesData } from './fetch-data.js';\n\nexport async function fetchModalData() {\n    try {\n        const { data } = await fetchMoviesData();\n        const modalWindow = document.querySelector('.modal');\n        \n        data.results.forEach(film => {\n            const description = document.createElement('p');\n            description.textContent = film.title;\n            modalWindow.appendChild(description);\n        });\n        // TODO: Remove console.log when done\n        console.log({data});\n    } catch (error) {\n        console.error('Error fetching modal data:', error);\n    }\n}\n\nfetchModalData();\n"],"names":["$030265fc907f3825$var$options","method","headers","accept","Authorization","async","$030265fc907f3825$export$9225d2b0b7431532","genresResponse","fetch","genreData","json","genresMap","genres","forEach","genre","id","name","moviesResponse","data","results","sort","a","b","vote_average","error","console","ul","document","querySelector","film","liElement","createElement","classList","add","imgElement","alt","src","poster_path","appendChild","filmInfoContainer","filmName","textContent","title","filmRating","genresNames","genre_ids","map","genreId","formattedGenres","length","slice","join","releaseYear","Date","release_date","getFullYear","rating","toFixed","innerHTML","append","$d706c914d748cb55$export$e7b4ff67398ed75","modalWindow","description","log","$8a7e756c566dd1ea$export$bce67339319127f5"],"version":3,"file":"index.e2fc3d77.js.map"}